import sys
import random
import string
import hashlib
import rsa
import base64
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit,
                               QPushButton, QFrame, QGridLayout, QStackedWidget, QMessageBox, QProgressBar, QListWidget,
                               QSizePolicy, QListWidgetItem, QGraphicsOpacityEffect, QGraphicsDropShadowEffect)
from PySide6.QtGui import QColor, QPainter, QPen, QBrush, QLinearGradient, QFont, QPalette, QPixmap
from PySide6.QtCore import Qt, Slot, QTimer, QTime, QPropertyAnimation, QEasingCurve, QRect, QParallelAnimationGroup, QSequentialAnimationGroup
from crypto_utils import encrypt_aes, decrypt_aes
import os
import re

# D·ªØ li·ªáu n√¢ng c·∫•p
UPGRADES = {
    "firewall": {"name": "üî• T∆∞·ªùng l·ª≠a N√¢ng cao", "cost": 30, "description": "Gi·∫£m 20% t·ªâ l·ªá g√≥i tin b·ªã t·∫•n c√¥ng", "effect": {"detection": 0.2}},
    "cpu": {"name": "‚ö° B·ªô x·ª≠ l√Ω L∆∞·ª£ng t·ª≠", "cost": 50, "description": "TƒÉng th√™m 15 gi√¢y x·ª≠ l√Ω ·ªü c√°c m√†n kh√≥", "effect": {"speed": 15}},
    "scanner": {"name": "üõ°Ô∏è H·ªá th·ªëng C·∫£nh b√°o S·ªõm", "cost": 70, "description": "T·ª± ƒë·ªông ph√°t hi·ªán l·ªói v√† c·∫£nh b√°o", "effect": {"detection": 0.3}},
    "ai_detection": {"name": "ü§ñ AI Ph√°t hi·ªán B·∫•t th∆∞·ªùng", "cost": 100, "description": "Gi·∫£m 30% nguy c∆° t·∫•n c√¥ng gi·∫£ l·∫≠p", "effect": {"detection": 0.3}},
    "backup_server": {"name": "üíæ M√°y ch·ªß D·ª± ph√≤ng", "cost": 120, "description": "TƒÉng 20 gi√¢y x·ª≠ l√Ω khi c√≥ s·ª± c·ªë", "effect": {"speed": 20}},
    "decoder": {"name": "üîì B·ªô c√¥ng c·ª• Gi·∫£i m√£", "cost": 50, "description": "TƒÉng 10% t·ªëc ƒë·ªô x·ª≠ l√Ω", "effect": {"speed": 10}},
    "detection": {"name": "üîç Ph√°t hi·ªán Gi·∫£ m·∫°o", "cost": 50, "description": "TƒÉng 20% x√°c su·∫•t ph√°t hi·ªán", "effect": {"detection": 0.2}},
    "training": {"name": "üéì Kh√≥a h·ªçc An ninh", "cost": 50, "description": "TƒÉng 50 ƒëi·ªÉm kinh nghi·ªám", "effect": {"score": 50}}
}

class AnimatedBackground(QWidget):
    """Widget n·ªÅn v·ªõi hi·ªáu ·ª©ng ƒë·ªông gradient v√† particles"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.particles = []
        self.init_particles()
        self.gradient_offset = 0
        
        # Timer cho animation
        self.animation_timer = QTimer(self)
        self.animation_timer.timeout.connect(self.update_animation)
        self.animation_timer.start(50)  # 50ms refresh rate
        
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

    def init_particles(self):
        """Kh·ªüi t·∫°o c√°c particles cho hi·ªáu ·ª©ng n·ªÅn"""
        for _ in range(50):
            particle = {
                'x': random.randint(0, 1920),
                'y': random.randint(0, 1080),
                'size': random.randint(1, 3),
                'speed_x': random.uniform(-0.5, 0.5),
                'speed_y': random.uniform(-0.5, 0.5),
                'opacity': random.randint(30, 100)
            }
            self.particles.append(particle)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # Gradient n·ªÅn ƒë·ªông
        gradient = QLinearGradient(0, 0, self.width(), self.height())
        gradient.setColorAt(0, QColor(15, 32, 62))  # Xanh ƒë·∫≠m
        gradient.setColorAt(0.5, QColor(25, 55, 109))  # Xanh ng√¢n h√†ng
        gradient.setColorAt(1, QColor(35, 47, 68))  # X√°m xanh
        
        painter.fillRect(self.rect(), gradient)
        
        # V·∫Ω particles
        for particle in self.particles:
            painter.setBrush(QBrush(QColor(100, 150, 255, particle['opacity'])))
            painter.setPen(Qt.NoPen)
            painter.drawEllipse(int(particle['x']), int(particle['y']), 
                              particle['size'], particle['size'])

    def update_animation(self):
        """C·∫≠p nh·∫≠t v·ªã tr√≠ particles"""
        for particle in self.particles:
            particle['x'] += particle['speed_x']
            particle['y'] += particle['speed_y']
            
            # Reset particle khi ra kh·ªèi m√†n h√¨nh
            if particle['x'] < 0 or particle['x'] > self.width():
                particle['x'] = random.randint(0, self.width())
            if particle['y'] < 0 or particle['y'] > self.height():
                particle['y'] = random.randint(0, self.height())
        
        self.update()

class AnimatedButton(QPushButton):
    """N√∫t b·∫•m v·ªõi hi·ªáu ·ª©ng animation"""
    def __init__(self, text, parent=None):
        super().__init__(text, parent)
        self.default_color = QColor(25, 55, 109)
        self.hover_color = QColor(35, 85, 165)
        self.press_color = QColor(15, 35, 79)
        
        # Animation cho scale effect
        self.scale_animation = QPropertyAnimation(self, b"geometry")
        self.scale_animation.setDuration(150)
        self.scale_animation.setEasingCurve(QEasingCurve.OutQuad)
        
        # Shadow effect
        self.shadow_effect = QGraphicsDropShadowEffect()
        self.shadow_effect.setBlurRadius(10)
        self.shadow_effect.setColor(QColor(0, 0, 0, 50))
        self.shadow_effect.setOffset(0, 2)
        self.setGraphicsEffect(self.shadow_effect)

    def enterEvent(self, event):
        """Hi·ªáu ·ª©ng khi hover"""
        super().enterEvent(event)
        self.animate_scale(1.05)
        self.shadow_effect.setBlurRadius(15)
        self.shadow_effect.setOffset(0, 4)

    def leaveEvent(self, event):
        """Hi·ªáu ·ª©ng khi r·ªùi chu·ªôt"""
        super().leaveEvent(event)
        self.animate_scale(1.0)
        self.shadow_effect.setBlurRadius(10)
        self.shadow_effect.setOffset(0, 2)

    def animate_scale(self, scale_factor):
        """Animation scaling"""
        current_rect = self.geometry()
        center = current_rect.center()
        new_width = int(current_rect.width() * scale_factor)
        new_height = int(current_rect.height() * scale_factor)
        new_rect = QRect(0, 0, new_width, new_height)
        new_rect.moveCenter(center)
        
        self.scale_animation.setStartValue(current_rect)
        self.scale_animation.setEndValue(new_rect)
        self.scale_animation.start()

class AnimatedProgressBar(QProgressBar):
    """Thanh ti·∫øn tr√¨nh v·ªõi hi·ªáu ·ª©ng animation"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.pulse_timer = QTimer(self)
        self.pulse_timer.timeout.connect(self.pulse_effect)
        self.pulse_value = 0
        self.pulse_direction = 1

    def start_pulse(self):
        """B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng pulse"""
        self.pulse_timer.start(50)

    def stop_pulse(self):
        """D·ª´ng hi·ªáu ·ª©ng pulse"""
        self.pulse_timer.stop()

    def pulse_effect(self):
        """Hi·ªáu ·ª©ng pulse cho thanh ti·∫øn tr√¨nh"""
        self.pulse_value += self.pulse_direction * 2
        if self.pulse_value >= 20:
            self.pulse_direction = -1
        elif self.pulse_value <= 0:
            self.pulse_direction = 1
        self.update()

class TransactionNotification(QWidget):
    """Widget th√¥ng b√°o giao d·ªãch v·ªõi animation"""
    def __init__(self, message, success=True, parent=None):
        super().__init__(parent)
        self.success = success
        self.init_ui(message)
        self.setup_animations()

    def init_ui(self, message):
        layout = QHBoxLayout(self)
        
        # Icon
        icon_label = QLabel("‚úÖ" if self.success else "‚ùå")
        icon_label.setStyleSheet("font-size: 20px;")
        
        # Message
        msg_label = QLabel(message)
        msg_label.setStyleSheet("""
            color: white;
            font-weight: bold;
            font-size: 14px;
        """)
        
        layout.addWidget(icon_label)
        layout.addWidget(msg_label)
        
        # Styling
        bg_color = "rgba(40, 167, 69, 0.9)" if self.success else "rgba(220, 53, 69, 0.9)"
        self.setStyleSheet(f"""
            QWidget {{
                background-color: {bg_color};
                border-radius: 8px;
                padding: 10px;
                border: 1px solid rgba(255, 255, 255, 0.3);
            }}
        """)

    def setup_animations(self):
        """Thi·∫øt l·∫≠p animations cho notification"""
        # Fade in animation
        self.opacity_effect = QGraphicsOpacityEffect()
        self.setGraphicsEffect(self.opacity_effect)
        
        self.fade_in = QPropertyAnimation(self.opacity_effect, b"opacity")
        self.fade_in.setDuration(300)
        self.fade_in.setStartValue(0.0)
        self.fade_in.setEndValue(1.0)
        
        # Slide in animation
        self.slide_in = QPropertyAnimation(self, b"geometry")
        self.slide_in.setDuration(300)
        self.slide_in.setEasingCurve(QEasingCurve.OutQuad)

    def show_notification(self, position):
        """Hi·ªÉn th·ªã notification v·ªõi animation"""
        start_rect = QRect(position.x(), position.y() - 50, 300, 60)
        end_rect = QRect(position.x(), position.y(), 300, 60)
        
        self.setGeometry(start_rect)
        self.slide_in.setStartValue(start_rect)
        self.slide_in.setEndValue(end_rect)
        
        # Parallel animation
        self.animation_group = QParallelAnimationGroup()
        self.animation_group.addAnimation(self.fade_in)
        self.animation_group.addAnimation(self.slide_in)
        
        self.show()
        self.animation_group.start()
        
        # Auto hide after 3 seconds
        QTimer.singleShot(3000, self.hide_notification)

    def hide_notification(self):
        """·∫®n notification v·ªõi animation"""
        fade_out = QPropertyAnimation(self.opacity_effect, b"opacity")
        fade_out.setDuration(300)
        fade_out.setStartValue(1.0)
        fade_out.setEndValue(0.0)
        fade_out.finished.connect(self.hide)
        fade_out.start()

class PhishingScreen(QWidget):
    """M√†n h√¨nh phishing v·ªõi hi·ªáu ·ª©ng"""
    def __init__(self, parent=None):
        super().__init__(parent)
        layout = QVBoxLayout(self)
        
        # Title v·ªõi animation
        title = QLabel("üé£ Ph√°t hi·ªán Email L·ª´a ƒë·∫£o")
        title.setObjectName("AnimatedTitle")
        title.setAlignment(Qt.AlignCenter)
        
        self.email_list = QListWidget()
        self.email_list.setObjectName("ModernList")
        self.email_list.addItems([
            "üìß Email 1: Th√¥ng b√°o chuy·ªÉn kho·∫£n kh·∫©n c·∫•p",
            "üìß Email 2: C·∫≠p nh·∫≠t b·∫£o m·∫≠t t√†i kho·∫£n", 
            "üìß Email 3: Ph·∫ßn th∆∞·ªüng kh√°ch h√†ng VIP",
            "‚ö†Ô∏è Email 4: C·∫£nh b√°o t√†i kho·∫£n b·ªã ƒë√≥ng bƒÉng"
        ])
        
        self.email_body = QLabel("üìã Ch·ªçn email ƒë·ªÉ xem chi ti·∫øt...")
        self.email_body.setObjectName("EmailContent")
        self.email_body.setWordWrap(True)
        
        layout.addWidget(title)
        layout.addWidget(self.email_list)
        layout.addWidget(self.email_body)
        
        self.email_list.currentTextChanged.connect(self.update_email_body)
        self.setStyleSheet("background: transparent;")

    def update_email_body(self, text):
        """C·∫≠p nh·∫≠t n·ªôi dung email v·ªõi hi·ªáu ·ª©ng"""
        if "kh·∫©n c·∫•p" in text or "ƒë√≥ng bƒÉng" in text:
            self.email_body.setText("""
            üö® C·∫¢NH B√ÅO: Email l·ª´a ƒë·∫£o!
            
            D·∫•u hi·ªáu nh·∫≠n bi·∫øt:
            ‚Ä¢ T·∫°o c·∫£m gi√°c kh·∫©n c·∫•p
            ‚Ä¢ Y√™u c·∫ßu th√¥ng tin c√° nh√¢n
            ‚Ä¢ Li√™n k·∫øt ƒë√°ng nghi
            ‚Ä¢ L·ªói ch√≠nh t·∫£, ng·ªØ ph√°p
            
            ‚ùå KH√îNG B·∫§M LINK ho·∫∑c cung c·∫•p th√¥ng tin!
            """)
            self.email_body.setStyleSheet("""
                QLabel#EmailContent {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                        stop:0 rgba(220, 53, 69, 0.1),
                        stop:1 rgba(220, 53, 69, 0.05));
                    border-left: 4px solid #dc3545;
                    color: #dc3545;
                    font-weight: bold;
                }
            """)
        else:
            self.email_body.setText("""
            ‚úÖ Email h·ª£p l·ªá
            
            ƒê·∫∑c ƒëi·ªÉm email tin c·∫≠y:
            ‚Ä¢ T·ª´ ƒë·ªãa ch·ªâ ch√≠nh th·ª©c
            ‚Ä¢ N·ªôi dung r√µ r√†ng, ch√≠nh x√°c
            ‚Ä¢ Kh√¥ng y√™u c·∫ßu th√¥ng tin nh·∫°y c·∫£m
            ‚Ä¢ C√≥ th·ªÉ x√°c minh qua k√™nh kh√°c
            
            ‚úì An to√†n ƒë·ªÉ x·ª≠ l√Ω
            """)
            self.email_body.setStyleSheet("""
                QLabel#EmailContent {
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                        stop:0 rgba(40, 167, 69, 0.1),
                        stop:1 rgba(40, 167, 69, 0.05));
                    border-left: 4px solid #28a745;
                    color: #28a745;
                    font-weight: bold;
                }
            """)

class UpgradeScreen(QWidget):
    """M√†n h√¨nh n√¢ng c·∫•p v·ªõi animation"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent = parent
        layout = QVBoxLayout(self)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(20)
        
        # Title
        title_label = QLabel("üè™ C·ª≠a h√†ng N√¢ng c·∫•p H·ªá th·ªëng")
        title_label.setObjectName("ShopTitle")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Score display
        self.upgrade_score_label = QLabel("üí∞ ƒêi·ªÉm c·ªßa b·∫°n: 0")
        self.upgrade_score_label.setObjectName("ScoreDisplay")
        layout.addWidget(self.upgrade_score_label)
        
        # Upgrade buttons
        self.upgrade_buttons = {}
        upgrade_layout = QVBoxLayout()
        
        for key, upgrade in UPGRADES.items():
            btn = AnimatedButton(f"{upgrade['name']} - {upgrade['cost']} ƒëi·ªÉm\n{upgrade['description']}")
            btn.setObjectName("UpgradeButton")
            btn.clicked.connect(lambda checked, k=key: self.parent.purchase_upgrade(k))
            upgrade_layout.addWidget(btn)
            self.upgrade_buttons[key] = btn
        
        layout.addLayout(upgrade_layout)
        
        # Continue button
        btn_continue = AnimatedButton("üöÄ Ti·∫øp t·ª•c Ca l√†m vi·ªác")
        btn_continue.setObjectName("ContinueButton")
        btn_continue.clicked.connect(parent.proceed_to_next_level)
        layout.addWidget(btn_continue)

class BankSecurityGame(QMainWindow):
    """Game b·∫£o m·∫≠t ng√¢n h√†ng v·ªõi giao di·ªán hi·ªán ƒë·∫°i"""
    def __init__(self):
        super().__init__()
        self.sender_public_key, self.sender_private_key = rsa.newkeys(2048)
        self.aes_key = base64.urlsafe_b64encode(os.urandom(16)).decode('utf-8')[:16]
        self.score = 0
        self.level = 1
        self.player_name = ""
        self.current_transaction_index = 0
        self.success_streak = 0
        self.purchased_upgrades = []
        self.upgrade_bonus = {"speed": 0, "detection": 0, "score": 0}
        self.achievements = []
        self.is_alerting = False
        self.otp_code = ""
        self.blink_timer = None
        self.is_blinking = False
        self.completed_transactions = []
        
        # Storyline data
        self.storyline_titles = {
            1: "üåÖ Ca s√°ng - Kh·ªüi ƒë·ªông h·ªá th·ªëng", 2: "‚òÄÔ∏è Ca s√°ng - Giao d·ªãch th∆∞·ªùng",
            3: "‚ö° H·ªá th·ªëng Qu√° t·∫£i", 4: "üî• √Åp l·ª±c Cao ƒëi·ªÉm",
            5: "üéØ T·∫•n c√¥ng C√≥ m·ª•c ƒë√≠ch", 6: "‚öîÔ∏è Chi·∫øn thu·∫≠t T·∫•n c√¥ng",
            7: "üí• Kh·ªßng ho·∫£ng T√†i ch√≠nh", 8: "üï∑Ô∏è T·∫•n c√¥ng Man-in-the-Middle",
            9: "üî® Brute Force N√¢ng cao", 10: "üåç Cu·ªôc chi·∫øn B·∫£o m·∫≠t To√†n c·∫ßu"
        }
        
        self.transactions_per_level = {1: 2, 2: 3, 3: 4, 4: 4, 5: 5, 6: 5, 7: 6, 8: 7, 9: 8, 10: 10}
        
        # Timers
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_timer)
        self.alert_timer = QTimer(self)
        self.alert_timer.timeout.connect(self.update_alert)
        
        self.init_ui()
        self.load_styles()
        self.reset_transaction_state()

    def init_ui(self):
        """Kh·ªüi t·∫°o giao di·ªán ng∆∞·ªùi d√πng"""
        self.setObjectName("MainWindow")
        self.setWindowTitle("üè¶ SecureBank Pro - H·ªá th·ªëng B·∫£o m·∫≠t Giao d·ªãch")
        self.setMinimumSize(1200, 800)
        
        # Container ch√≠nh
        self.container = QWidget(self)
        self.container.setObjectName("CentralWidget")
        self.setCentralWidget(self.container)
        
        # Background animation
        self.background_widget = AnimatedBackground(self.container)
        
        # Stacked widget cho c√°c m√†n h√¨nh
        self.stack = QStackedWidget(self.container)
        self.stack.setStyleSheet("background: transparent;")
        
        # T·∫°o c√°c m√†n h√¨nh
        self.create_start_screen()
        self.create_game_screen()
        self.phishing_screen = PhishingScreen(self)
        self.upgrade_screen = UpgradeScreen(self)
        
        # Th√™m v√†o stack
        self.stack.addWidget(self.start_screen_widget)
        self.stack.addWidget(self.game_screen_widget)
        self.stack.addWidget(self.phishing_screen)
        self.stack.addWidget(self.upgrade_screen)
        
        self.show_start_screen()

    def load_styles(self):
        """Load stylesheet hi·ªán ƒë·∫°i"""
        with open('modern_bank_style.qss', 'r', encoding='utf-8') as f:
            self.setStyleSheet(f.read())

    def resizeEvent(self, event):
        """X·ª≠ l√Ω thay ƒë·ªïi k√≠ch th∆∞·ªõc c·ª≠a s·ªï"""
        self.background_widget.resize(event.size())
        self.stack.resize(event.size())
        super().resizeEvent(event)

    def create_start_screen(self):
        """T·∫°o m√†n h√¨nh b·∫Øt ƒë·∫ßu"""
        self.start_screen_widget = QWidget()
        self.start_screen_widget.setStyleSheet("background: transparent;")
        layout = QVBoxLayout(self.start_screen_widget)
        layout.setAlignment(Qt.AlignCenter)
        layout.setSpacing(30)
        
        # Logo v√† title
        title = QLabel("üè¶ SecureBank Pro")
        title.setObjectName("MainTitle")
        
        subtitle = QLabel("H·ªá th·ªëng B·∫£o m·∫≠t Giao d·ªãch Ng√¢n h√†ng")
        subtitle.setObjectName("Subtitle")
        
        # Input t√™n ng∆∞·ªùi ch∆°i  
        self.entry_player_name = QLineEdit()
        self.entry_player_name.setPlaceholderText("üë§ Nh·∫≠p t√™n Chuy√™n vi√™n B·∫£o m·∫≠t...")
        self.entry_player_name.setObjectName("PlayerNameInput")
        self.entry_player_name.setMinimumWidth(400)
        
        # Start button
        btn_start = AnimatedButton("üöÄ B·∫Øt ƒë·∫ßu Ca l√†m vi·ªác")
        btn_start.setObjectName("StartButton")
        btn_start.clicked.connect(lambda: self.setup_new_level(1))
        
        layout.addWidget(title)
        layout.addWidget(subtitle)
        layout.addWidget(self.entry_player_name)
        layout.addWidget(btn_start)

    def create_game_screen(self):
        """T·∫°o m√†n h√¨nh game ch√≠nh"""
        self.game_screen_widget = QWidget()
        self.game_screen_widget.setObjectName("GameScreen")
        layout = QVBoxLayout(self.game_screen_widget)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # Header v·ªõi th√¥ng tin game
        header_layout = self.create_header()
        layout.addLayout(header_layout)
        
        # Danh s√°ch giao d·ªãch ƒë√£ x·ª≠ l√Ω
        self.completed_transactions_list = QListWidget()
        self.completed_transactions_list.setObjectName("CompletedTransactionsList")
        self.completed_transactions_list.setMaximumHeight(100)
        layout.addWidget(self.create_group_box("‚úÖ Giao d·ªãch ƒê√£ X·ª≠ l√Ω", self.completed_transactions_list))
        
        # Panel ch√≠nh v·ªõi sender v√† receiver
        main_panels = self.create_main_panels()
        layout.addLayout(main_panels)
        
        # Buttons control
        control_buttons = self.create_control_buttons()
        layout.addLayout(control_buttons)

    def create_header(self):
        """T·∫°o header v·ªõi th√¥ng tin game"""
        header_layout = QHBoxLayout()
        
        self.label_level = QLabel()
        self.label_level.setObjectName("LevelLabel")
        
        self.label_score = QLabel()
        self.label_score.setObjectName("ScoreLabel")
        
        self.timer_label = AnimatedProgressBar()
        self.timer_label.setObjectName("TimerBar")
        self.timer_label.setMinimumWidth(200)
        
        self.achievement_label = QLabel("üèÜ Huy hi·ªáu: Ch∆∞a c√≥")
        self.achievement_label.setObjectName("AchievementLabel")
        
        header_layout.addWidget(self.label_level)
        header_layout.addWidget(self.timer_label)
        header_layout.addWidget(self.achievement_label)
        header_layout.addStretch()
        header_layout.addWidget(self.label_score)
        
        return header_layout

    def create_main_panels(self):
        """T·∫°o panel ch√≠nh v·ªõi sender v√† receiver"""
        main_hbox = QHBoxLayout()
        main_hbox.setSpacing(20)
        
        # Sender panel
        sender_panel = self.create_sender_panel()
        main_hbox.addWidget(self.create_group_box("üì§ B√äN G·ª¨I (SENDER)", sender_panel), 1)
        
        # Receiver panel  
        receiver_panel = self.create_receiver_panel()
        main_hbox.addWidget(self.create_group_box("üì• B√äN NH·∫¨N (RECEIVER)", receiver_panel), 1)
        
        return main_hbox

    def create_sender_panel(self):
        """T·∫°o panel b√™n g·ª≠i"""
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        # Input fields
        self.entry_account = QLineEdit()
        self.entry_account.setPlaceholderText("üí≥ S·ªë t√†i kho·∫£n (ch·ªâ s·ªë v√† ch·ªØ kh√¥ng d·∫•u)")
        self.entry_account.setObjectName("AccountInput")
        
        self.entry_amount = QLineEdit()
        self.entry_amount.setPlaceholderText("üí∞ S·ªë ti·ªÅn giao d·ªãch")
        self.entry_amount.setObjectName("AmountInput")
        
        self.entry_message = QLineEdit()
        self.entry_message.setPlaceholderText("üí¨ N·ªôi dung chuy·ªÉn kho·∫£n")
        self.entry_message.setObjectName("MessageInput")
        
        # Buttons
        self.btn_generate_keys = AnimatedButton("üîë T·∫°o Kh√≥a RSA")
        self.btn_generate_keys.setObjectName("GenerateButton")
        self.btn_generate_keys.clicked.connect(self.generate_keys)
        
        self.btn_encrypt = AnimatedButton("üîí M√£ h√≥a & G·ª≠i")
        self.btn_encrypt.setObjectName("EncryptButton")
        self.btn_encrypt.clicked.connect(self.encrypt_and_send)
        
        # Status
        self.sender_status = QLabel("‚è≥ Ch·ªù nh·∫≠p li·ªáu...")
        self.sender_status.setObjectName("StatusLabel")
        
        layout.addWidget(self.entry_account)
        layout.addWidget(self.entry_amount)
        layout.addWidget(self.entry_message)
        layout.addWidget(self.btn_generate_keys)
        layout.addWidget(self.btn_encrypt)
        layout.addWidget(self.sender_status)
        
        return layout

    def create_receiver_panel(self):
        """T·∫°o panel b√™n nh·∫≠n"""
        layout = QVBoxLayout()
        layout.setSpacing(15)
        
        # Display fields
        self.display_encrypted = QLineEdit()
        self.display_encrypted.setPlaceholderText("üîê D·ªØ li·ªáu m√£ h√≥a s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        self.display_encrypted.setReadOnly(True)
        self.display_encrypted.setObjectName("EncryptedDisplay")
        
        self.display_decrypted = QLineEdit()
        self.display_decrypted.setPlaceholderText("üìã D·ªØ li·ªáu gi·∫£i m√£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...")
        self.display_decrypted.setReadOnly(True)
        self.display_decrypted.setObjectName("DecryptedDisplay")
        
        # OTP
        self.entry_otp = QLineEdit()
        self.entry_otp.setPlaceholderText("üî¢ Nh·∫≠p m√£ OTP ƒë·ªÉ x√°c th·ª±c")
        self.entry_otp.setObjectName("OTPInput")
        
        # Buttons
        self.btn_decrypt = AnimatedButton("üîì Gi·∫£i m√£ & X√°c th·ª±c")
        self.btn_decrypt.setObjectName("DecryptButton")
        self.btn_decrypt.clicked.connect(self.decrypt_and_verify)
        
        self.btn_complete = AnimatedButton("‚úÖ Ho√†n th√†nh Giao d·ªãch")
        self.btn_complete.setObjectName("CompleteButton")
        self.btn_complete.clicked.connect(self.complete_transaction)
        
        # Status
        self.receiver_status = QLabel("‚è≥ Ch·ªù d·ªØ li·ªáu...")
        self.receiver_status.setObjectName("StatusLabel")
        
        layout.addWidget(self.display_encrypted)
        layout.addWidget(self.display_decrypted)
        layout.addWidget(self.entry_otp)
        layout.addWidget(self.btn_decrypt)
        layout.addWidget(self.btn_complete)
        layout.addWidget(self.receiver_status)
        
        return layout

    def create_control_buttons(self):
        """T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn"""
        button_layout = QHBoxLayout()
        button_layout.setSpacing(15)
        
        self.btn_help = AnimatedButton("‚ùì H∆∞·ªõng d·∫´n")
        self.btn_help.setObjectName("HelpButton") 
        self.btn_help.clicked.connect(self.show_help)
        
        self.btn_emergency = AnimatedButton("üö® Ch·∫ø ƒë·ªô Kh·∫©n c·∫•p")
        self.btn_emergency.setObjectName("EmergencyButton")
        self.btn_emergency.clicked.connect(self.on_emergency)
        
        self.btn_upgrade = AnimatedButton("üõí C·ª≠a h√†ng N√¢ng c·∫•p")
        self.btn_upgrade.setObjectName("UpgradeButton")
        self.btn_upgrade.clicked.connect(self.show_upgrade_screen)
        
        button_layout.addStretch()
        button_layout.addWidget(self.btn_help)
        button_layout.addWidget(self.btn_emergency)
        button_layout.addWidget(self.btn_upgrade)
        button_layout.addStretch()
        
        return button_layout

    def create_group_box(self, title, widget):
        """T·∫°o group box cho c√°c panel"""
        frame = QFrame()
        frame.setObjectName("GroupFrame")
        layout = QVBoxLayout(frame)
        
        title_label = QLabel(title)
        title_label.setObjectName("GroupTitleLabel")
        
        layout.addWidget(title_label)
        if isinstance(widget, QLayout):
            layout.addLayout(widget)
        else:
            layout.addWidget(widget)
            
        return frame

    # Game logic methods (gi·ªØ nguy√™n t·ª´ code g·ªëc)
    def generate_keys(self):
        """T·∫°o kh√≥a RSA m·ªõi"""
        self.sender_public_key, self.sender_private_key = rsa.newkeys(2048)
        self.sender_status.setText("‚úÖ ƒê√£ t·∫°o kh√≥a RSA 2048-bit")
        self.show_notification("üîë Kh√≥a RSA ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!", True)

    def encrypt_and_send(self):
        """M√£ h√≥a v√† g·ª≠i d·ªØ li·ªáu"""
        account = self.entry_account.text().strip()
        amount = self.entry_amount.text().strip()
        message = self.entry_message.text().strip()
        
        if not all([account, amount, message]):
            self.show_notification("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", False)
            return
            
        # Validate account format
        if not re.match(r'^[a-zA-Z0-9]+$', account):
            self.show_notification("‚ùå S·ªë t√†i kho·∫£n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ v√† s·ªë!", False)
            return
            
        try:
            float(amount)
        except ValueError:
            self.show_notification("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá!", False)
            return
        
        # M√£ h√≥a d·ªØ li·ªáu
        data = f"T√†i kho·∫£n: {account}|S·ªë ti·ªÅn: {amount}|N·ªôi dung: {message}"
        
        try:
            encrypted_data = encrypt_aes(data, self.aes_key)
            self.display_encrypted.setText(encrypted_data[:50] + "...")
            
            # T·∫°o OTP
            self.otp_code = ''.join(random.choices(string.digits, k=6))
            
            self.sender_status.setText("‚úÖ ƒê√£ m√£ h√≥a v√† g·ª≠i d·ªØ li·ªáu")
            self.receiver_status.setText(f"üì® ƒê√£ nh·∫≠n d·ªØ li·ªáu. OTP: {self.otp_code}")
            
            self.show_notification("üîí D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c m√£ h√≥a v√† g·ª≠i!", True)
            
        except Exception as e:
            self.show_notification(f"‚ùå L·ªói m√£ h√≥a: {str(e)}", False)

    def decrypt_and_verify(self):
        """Gi·∫£i m√£ v√† x√°c th·ª±c"""
        otp_input = self.entry_otp.text().strip()
        
        if not self.display_encrypted.text() or self.display_encrypted.text() == "üîê D·ªØ li·ªáu m√£ h√≥a s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...":
            self.show_notification("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ gi·∫£i m√£!", False)
            return
            
        if otp_input != self.otp_code:
            self.show_notification("‚ùå M√£ OTP kh√¥ng ch√≠nh x√°c!", False)
            return
        
        try:
            # L·∫•y d·ªØ li·ªáu m√£ h√≥a ƒë·∫ßy ƒë·ªß (kh√¥ng b·ªã c·∫Øt)
            encrypted_full = encrypt_aes(
                f"T√†i kho·∫£n: {self.entry_account.text()}|S·ªë ti·ªÅn: {self.entry_amount.text()}|N·ªôi dung: {self.entry_message.text()}",
                self.aes_key
            )
            
            decrypted_data = decrypt_aes(encrypted_full, self.aes_key)
            self.display_decrypted.setText(decrypted_data)
            
            self.receiver_status.setText("‚úÖ ƒê√£ gi·∫£i m√£ v√† x√°c th·ª±c th√†nh c√¥ng")
            self.show_notification("üîì Gi·∫£i m√£ th√†nh c√¥ng! D·ªØ li·ªáu h·ª£p l·ªá.", True)
            
        except Exception as e:
            self.show_notification(f"‚ùå L·ªói gi·∫£i m√£: {str(e)}", False)

    def complete_transaction(self):
        """Ho√†n th√†nh giao d·ªãch"""
        if not self.display_decrypted.text() or self.display_decrypted.text() == "üìã D·ªØ li·ªáu gi·∫£i m√£ s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y...":
            self.show_notification("‚ö†Ô∏è Ch∆∞a gi·∫£i m√£ d·ªØ li·ªáu!", False)
            return
        
        # Th√™m v√†o danh s√°ch giao d·ªãch ho√†n th√†nh
        transaction_info = f"‚úÖ Giao d·ªãch #{self.current_transaction_index + 1}: {self.entry_amount.text()} VND - {self.entry_message.text()[:30]}..."
        self.completed_transactions.append(transaction_info)
        self.completed_transactions_list.addItem(transaction_info)
        
        # TƒÉng ƒëi·ªÉm
        points = 10 + (self.level * 2)
        self.score += points
        self.success_streak += 1
        
        self.show_notification(f"üéâ Giao d·ªãch ho√†n th√†nh! +{points} ƒëi·ªÉm", True)
        
        # Reset form
        self.reset_transaction_state()
        
        # Ki·ªÉm tra level up
        self.current_transaction_index += 1
        if self.current_transaction_index >= self.transactions_per_level.get(self.level, 3):
            self.level_up()
        else:
            self.update_ui_labels()

    def show_notification(self, message, success=True):
        """Hi·ªÉn th·ªã th√¥ng b√°o v·ªõi animation"""
        notification = TransactionNotification(message, success, self)
        notification.show_notification(self.rect().center())

    def reset_transaction_state(self):
        """Reset tr·∫°ng th√°i giao d·ªãch"""
        self.entry_account.clear()
        self.entry_amount.clear()
        self.entry_message.clear()
        self.entry_otp.clear()
        self.display_encrypted.clear()
        self.display_decrypted.clear()
        
        self.sender_status.setText("‚è≥ Ch·ªù nh·∫≠p li·ªáu...")
        self.receiver_status.setText("‚è≥ Ch·ªù d·ªØ li·ªáu...")
        
        self.otp_code = ""

    def level_up(self):
        """TƒÉng level"""
        self.level += 1
        self.current_transaction_index = 0
        self.show_notification(f"üÜô L√™n c·∫•p {self.level}! Ch√∫c m·ª´ng!", True)
        
        if self.level <= 10:
            self.show_upgrade_screen()
        else:
            self.show_victory()

    def show_upgrade_screen(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh n√¢ng c·∫•p"""
        self.upgrade_screen.upgrade_score_label.setText(f"üí∞ ƒêi·ªÉm c·ªßa b·∫°n: {self.score}")
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i buttons
        for key, btn in self.upgrade_screen.upgrade_buttons.items():
            if key in self.purchased_upgrades:
                btn.setText(f"‚úÖ {UPGRADES[key]['name']} - ƒê√£ mua")
                btn.setEnabled(False)
            else:
                cost = UPGRADES[key]['cost']
                btn.setEnabled(self.score >= cost)
                
        self.stack.setCurrentWidget(self.upgrade_screen)

    def purchase_upgrade(self, upgrade_key):
        """Mua n√¢ng c·∫•p"""
        if upgrade_key in self.purchased_upgrades:
            return
            
        upgrade = UPGRADES[upgrade_key]
        if self.score >= upgrade['cost']:
            self.score -= upgrade['cost']
            self.purchased_upgrades.append(upgrade_key)
            
            # √Åp d·ª•ng hi·ªáu ·ª©ng
            for effect_type, value in upgrade['effect'].items():
                self.upgrade_bonus[effect_type] += value
                
            self.show_notification(f"üõí ƒê√£ mua: {upgrade['name']}", True)
            
            # C·∫≠p nh·∫≠t UI
            self.upgrade_screen.upgrade_score_label.setText(f"üí∞ ƒêi·ªÉm c·ªßa b·∫°n: {self.score}")
            btn = self.upgrade_screen.upgrade_buttons[upgrade_key]
            btn.setText(f"‚úÖ {upgrade['name']} - ƒê√£ mua")
            btn.setEnabled(False)

    def proceed_to_next_level(self):
        """Ti·∫øn t·ªõi level ti·∫øp theo"""
        self.setup_new_level(self.level)

    def setup_new_level(self, level):
        """Thi·∫øt l·∫≠p level m·ªõi"""
        if level == 1:
            self.player_name = self.entry_player_name.text().strip() or "Chuy√™n vi√™n B·∫£o m·∫≠t"
            
        self.level = level
        self.current_transaction_index = 0
        self.update_ui_labels()
        self.reset_transaction_state()
        
        # Start timer
        time_limit = 60 + self.upgrade_bonus.get('speed', 0)
        self.timer_label.setMaximum(time_limit)
        self.timer_label.setValue(time_limit)
        self.timer_label.start_pulse()
        self.timer.start(1000)
        
        self.stack.setCurrentWidget(self.game_screen_widget)

    def update_ui_labels(self):
        """C·∫≠p nh·∫≠t labels UI"""
        level_title = self.storyline_titles.get(self.level, f"Level {self.level}")
        self.label_level.setText(f"üéØ {level_title}")
        self.label_score.setText(f"üí∞ ƒêi·ªÉm: {self.score}")
        
        # C·∫≠p nh·∫≠t achievements
        if self.success_streak >= 5:
            self.achievement_label.setText("üèÜ Streak Master")
        elif self.success_streak >= 3:
            self.achievement_label.setText("ü•â Consistent")
        else:
            self.achievement_label.setText("üèÜ Huy hi·ªáu: Ch∆∞a c√≥")

    def update_timer(self):
        """C·∫≠p nh·∫≠t timer"""
        current_value = self.timer_label.value()
        if current_value > 0:
            self.timer_label.setValue(current_value - 1)
        else:
            self.timer.stop()
            self.timer_label.stop_pulse()
            self.show_notification("‚è∞ H·∫øt th·ªùi gian! Game Over!", False)
            self.game_over()

    def update_alert(self):
        """C·∫≠p nh·∫≠t alert"""
        pass  # Placeholder for alert logic

    def show_help(self):
        """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n"""
        help_text = """
        üéØ H∆Ø·ªöNG D·∫™N CH∆†I:
        
        1. üîë T·∫°o kh√≥a RSA ƒë·ªÉ b·∫£o m·∫≠t
        2. üí∞ Nh·∫≠p th√¥ng tin giao d·ªãch
        3. üîí M√£ h√≥a d·ªØ li·ªáu b·∫±ng AES
        4. üî¢ Nh·∫≠p m√£ OTP ƒë·ªÉ x√°c th·ª±c
        5. üîì Gi·∫£i m√£ v√† ki·ªÉm tra
        6. ‚úÖ Ho√†n th√†nh giao d·ªãch
        
        üí° M·∫∏O:
        ‚Ä¢ Mua n√¢ng c·∫•p ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
        ‚Ä¢ Ho√†n th√†nh streak ƒë·ªÉ nh·∫≠n huy hi·ªáu
        ‚Ä¢ Ch√∫ √Ω th·ªùi gian c√≤n l·∫°i
        """
        
        msg = QMessageBox(self)
        msg.setWindowTitle("üìö H∆∞·ªõng d·∫´n Game")
        msg.setText(help_text)
        msg.setStyleSheet("""
            QMessageBox {
                background-color: #1e3a5f;
                color: white;
            }
            QMessageBox QPushButton {
                background-color: #2d5aa0;
                color: white;
                border-radius: 5px;
                padding: 8px 16px;
                font-weight: bold;
            }
        """)
        msg.exec()

    def on_emergency(self):
        """X·ª≠ l√Ω ch·∫ø ƒë·ªô kh·∫©n c·∫•p"""
        self.show_notification("üö® Ch·∫ø ƒë·ªô kh·∫©n c·∫•p ƒë√£ k√≠ch ho·∫°t!", False)
        # Th√™m 30 gi√¢y
        current_time = self.timer_label.value()
        self.timer_label.setValue(min(current_time + 30, self.timer_label.maximum()))

    def show_start_screen(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh b·∫Øt ƒë·∫ßu"""
        self.stack.setCurrentWidget(self.start_screen_widget)

    def game_over(self):
        """X·ª≠ l√Ω game over"""
        msg = QMessageBox(self)
        msg.setWindowTitle("üéÆ Game Over")
        msg.setText(f"""
        üèÅ Game Over!
        
        üìä Th·ªëng k√™:
        ‚Ä¢ Level ƒë·∫°t ƒë∆∞·ª£c: {self.level}
        ‚Ä¢ T·ªïng ƒëi·ªÉm: {self.score}
        ‚Ä¢ Giao d·ªãch ho√†n th√†nh: {len(self.completed_transactions)}
        
        üîÑ B·∫°n c√≥ mu·ªën ch∆°i l·∫°i kh√¥ng?
        """)
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        
        if msg.exec() == QMessageBox.Yes:
            self.restart_game()
        else:
            self.close()

    def show_victory(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh chi·∫øn th·∫Øng"""
        msg = QMessageBox(self)
        msg.setWindowTitle("üèÜ Chi·∫øn th·∫Øng!")
        msg.setText(f"""
        üéâ Ch√∫c m·ª´ng {self.player_name}!
        
        B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ 10 level!
        
        üìä K·∫øt qu·∫£ cu·ªëi:
        ‚Ä¢ T·ªïng ƒëi·ªÉm: {self.score}
        ‚Ä¢ Giao d·ªãch ho√†n th√†nh: {len(self.completed_transactions)}
        ‚Ä¢ N√¢ng c·∫•p ƒë√£ mua: {len(self.purchased_upgrades)}
        
        üèÖ B·∫°n l√† m·ªôt Chuy√™n gia B·∫£o m·∫≠t th·ª±c th·ª•!
        """)
        msg.exec()
        
        self.restart_game()

    def restart_game(self):
        """Kh·ªüi ƒë·ªông l·∫°i game"""
        self.score = 0
        self.level = 1
        self.current_transaction_index = 0
        self.success_streak = 0
        self.purchased_upgrades = []
        self.upgrade_bonus = {"speed": 0, "detection": 0, "score": 0}
        self.completed_transactions = []
        self.completed_transactions_list.clear()
        
        self.timer.stop()
        self.timer_label.stop_pulse()
        
        self.show_start_screen()

def main():
    """H√†m ch√≠nh"""
    app = QApplication(sys.argv)
    app.setApplicationName("SecureBank Pro")
    app.setApplicationVersion("2.0")
    
    # Set font
    font = QFont("Inter", 10)
    app.setFont(font)
    
    # T·∫°o v√† hi·ªÉn th·ªã game
    game = BankSecurityGame()
    game.showMaximized()
    
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
